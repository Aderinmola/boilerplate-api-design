openapi: 3.1.0
info:
  title: HNG Stage Three Tasks API
  description: This API provides endpoints to manage users, organisations, blog posts, payments, notifications, and messages. 
    It is designed based on the OpenAPI 3.1 specification and aims to demonstrate a well-structured API definition 
    using FastAPI as the backend framework.
  version: 1.0.0
servers:
  - url: http://api.domain.com/v1
tags:
  - name: Admin
    description: Endpoints to manage users and admin-related tasks

  - name: Auth
    description: Manage authentication and authorization.
  
  - name: Users
    description: Manage users. Requires authentication.
  
  - name: Organisations
    description: Manage organisations. Requires authentication.
    
  - name: User Organisation
    description: Manage user-organisation relationships. Requires authentication.

paths:
# Authentication
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: boolean
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /auth/login:
    post:
      summary: Log in a user and return a JWT token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /auth/logout:
    post:
      tags: [Auth]
      summary: Log out a user
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

# Users
  /users:
    get:
      summary: Get a list of users
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{unique_id}:
    get:
      summary: Get a user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: unique_id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

# Organisation
  /organisations:
    get:
      summary: Get all organisations
      tags: [Organisations]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of organisations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation'

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    post:
      summary: Create a new organisation
      tags: [Organisations]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationCreate'
      responses:
        '201':
          description: Organisation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /organisations/{id}:
    get:
      summary: Get an organisation by ID
      tags: [Organisations]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: A single organisation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '404':
          description: Organisation not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    put:
      summary: Update an existing organisation
      tags: [Organisations]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationCreate'
      responses:
        '200':
          description: Organisation updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: Organisation not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    
    delete:
      summary: Delete an organisation by ID
      tags: [Organisations]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Organisation deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Organisation not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

# User_organisation
  /user_organisation:
    get:
      summary: Get a list of user-organisation relationships.
      tags: [User Organisation]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserOrganisation'

    post:
      summary: Create a new user-organisation relationship.
      tags: [User Organisation]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserOrganisationCreate'
      responses:
        '201':
          description: User-organisation relationship created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOrganisation'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /user_organisation/{id}:
    get:
      summary: Get a user-organisation relationship by ID.
      tags: [User Organisation]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOrganisation'
        '404':
          description: User-organisation relationship not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    put:
      summary: Update an existing user-organisation relationship.
      tags: [User Organisation]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserOrganisationCreate'
      responses:
        '200':
          description: User-organisation relationship updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: User-organisation relationship not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    
    delete:
      summary: Delete a user-organisation relationship by ID.
      tags: [User Organisation]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: User-organisation relationship deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User-organisation relationship not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
# Messages

# Notification

# Payment

# Transaction

# Post

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        unique_id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Organisation:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    OrganisationCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string

    UserOrganisation:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: object
          properties:
            id:
              type: integer
            unique_id:
              type: string
            first_name:
              type: string
            last_name:
              type: string
            phone:
              type: string
            email:
              type: string
            password:
              type: string
            role:
              type: boolean
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
        organisation_id:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            description:
              type: string
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
    
    UserOrganisationCreate:
      type: object
      required:
        - user_id
        - organisation_id
      properties:
        name:
          type: integer
        description:
          type: integer
